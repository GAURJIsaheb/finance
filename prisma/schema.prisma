generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

// User Table
model usersTable_Var {   // Frontend will use this name
  id           String            @id @default(uuid())
  clerkUserId  String            @unique
  email        String            @unique
  name         String?
  imageUrl     String?
  transactions TransactionTable_Var[]
  accounts     accountsTable_Var[]
  budgets      BudgetTable_Var[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("usersTable")  // Actual DB table name
}

// Account Table
model accountsTable_Var {  // Frontend will use this name
  id          String            @id @default(uuid())
  name        String            
  type        AccountType
  balance     Decimal           @default(0)
  isDefault   Boolean           @default(false)
  userId      String            
  user        usersTable_Var    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions TransactionTable_Var[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([userId])
  @@map("accountsTable")  // Actual DB table name
}

// Transaction Table
model TransactionTable_Var {  // Frontend will use this name
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category         String
  receiptUrl       String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed     DateTime?
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  user              usersTable_Var     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           accountsTable_Var  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactionsTable")  // Actual DB table name
}

// Budget Table
model BudgetTable_Var {  // Frontend will use this name
  id            String             @id @default(uuid())
  amount        Decimal         
  lastAlertSent DateTime?
  userId        String
  user          usersTable_Var     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([userId])
  @@map("budgetsTable")  // Actual DB table name
}

// Enums
enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
